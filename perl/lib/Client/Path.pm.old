#!/usr/bin/env perl 

=head1 NAME

Client::Path - Write web traffic path data as CSV, XML, HTML or JSON

=head1 VERSION

This document refers to version 1.0 of Client::Path, released Oct 20, 2009

=head1 DESCRIPTION

Client::Path writes daily web traffic path data as CSV, XML, HTML and JSON.

=head2 Properties

=over 4

None

=back

=cut
package Client::Path;
$VERSION = "1.0";

use strict;
use Client::Reporter;
use Data::Site;
use Utils::Time;
use XML::Simple;
use JSON;
{
    # Class static properties

    use constant STALE_TIME => 120; # 2 minutes

=head2 Class Methods

=over 4

=item new($site_id)

Create a new Client::Path object

=cut
sub new
{
    my ($class, $site_id) = @_;
    die "need the id of the site being reported" unless $site_id;

    # Get the site details (e.g. data server and time zone)

    Data::Site->connect();
    my $site = Data::Site->row($site_id);
    Data::Site->disconnect();
    $site->{site_id} or die "no site with ID $site_id";

    # Make a new Report object

    my $self = {
        site => $site,
        channels => 0,
    };

    # Return the new Report object

    bless $self, $class;
}

=back

=head2 Object Methods

=over 4

=item refresh()

Refresh today's traffic path data if it's stale

=cut
sub refresh
{
    my ($self) = @_;
    return if $self->{site}{report_time} > time() - STALE_TIME;
    $self->{site} = Client::Reporter->new($self->{site}{site_id})->generate();
}

=item generate(date => $date, channel => $channel_id, name => $name, format => $format, include => $include, exclude => $exclude, request => $request)

Generate traffic path data from web site activity records

=cut
sub generate
{
    my ($self, %args) = @_;
    my $start_date = $args{start_date} || 0; # default to today
    my $end_date = $args{end_date} || 0; # default to today
    my $page = $args{page} || Constants::General::HOME_PAGE;
    my $channel_id = $args{channel} || 0;
    my $format = $args{format} || 'html';
    my $limit = $args{limit} || '';
    my $include = $args{include} || '';
    my $exclude = $args{exclude} || '';
    my $request = $args{request} || '';

    # Get the site details

    my $site = $self->{site};
    return if $site->{status} eq 'S';

    # Fix any offset date values

    if ($start_date < 20000000)
    {
        my $time = time() - 86400 * $start_date; # $start_date is number of days
        $start_date = Utils::Time->get_date($time, $site->{time_zone})
    }

    if ($end_date < 20000000)
    {
        my $time = time() - 86400 * $end_date; # $end_date is a number of days
        $end_date = Utils::Time->get_date($time, $site->{time_zone})
    }

    # Prepare empty traffic path reports

    my $reports = {};

    # Get a channel list (if used)

    my @channel_ids = split /,/, $channel_id;
    foreach my $channel_id (@channel_ids)
    {
        # Refresh today's traffic path data

        $self->refresh() unless $end_date;

        # Get traffic path data through a page

        $self->get_path( reports => $reports,
                         page => $page,
                         request => $request,
                         start_date => $start_date,
                         end_date => $start_date,
                         channel_id => $channel_id,
                         limit => $limit,
                         include => $include,
                         exclude => $exclude );
    } # channel list

    # Format the traffic path reports

    my $output = '';
    $output = $self->xml_reports($reports) if $format eq 'xml';
    $output = $self->csv_reports($reports) if $format eq 'csv';
    $output = $self->html_reports($reports) if $format eq 'html';
    $output = $self->json_reports($reports) if $format eq 'json';

    # Return the path reports

    return $output;
}

=item get_path(%args)

Get traffic path data for a channel with optional filters to include and exclude

=cut
sub get_path
{
    my ($self, %args) = @_;
    my $site = $self->{site} or die "no site";
    my $reports = $args{reports} or die "no reports";
    my $channel_id = $args{channel_id} || 0;
    my $page = $args{page} || '';

    # Get the start and end times from dates

    my ($start_time, $unused1) = Utils::Time->get_time_range($args{start_date}, $site->{time_zone});
    my ($unused2, $end_time) = Utils::Time->get_time_range($args{end_date}, $site->{time_zone});

    # Setup the reports data structure

    $reports->{site} ||= { id => $site->{site_id}, url => $site->{url}, time_zone => $site->{time_zone}, start_time => $start_time, end_time => $end_time, start_date => $args{start_date}, end_date => $args{end_date} };
    my $channel = $self->get_channel($reports, $site->{site_id}, $channel_id);

    # Connect to the site's main data server

    my $data_server = $site->data_server();
    my $dbh = $data_server->connect();

    # Get path data passing through the page

    my $total = 0;
    my $hash_in = {};
    my $hash_out = {};
    my $database = 'stats' . $site->{site_id};
    my $query = $dbh->prepare("select sequence, channels from $database.Traffic where time between ? and ?");
    $query->execute($start_time, $end_time);
    while (my $row = $query->fetchrow_hashref())
    {
        # Check that the path includes our query page

        next unless "$row->{sequence}|" =~ /\s$page\/?[\|\s]/;
        $total++;

        # Extract all the channel IDs and path pages

        my @channels = split ',', $row->{channels};
        my @sequence = split '\|', $row->{sequence};

        # Create "in" and "out" path info hashes

        my $found = 0;
        my @path_in = ();
        my @path_out = ();
        foreach my $p (@sequence)
        {
            my ($event_id, $duration) = ($1, $2) if $p =~ s/^(\d+):(\d+)\s//;
            next unless $event_id == Constants::Events::TYPE_PAGE || $event_id == Constants::Events::TYPE_FILE;
            my $refer_id = $1 if $p =~ s/\s(\d+)$//;
            $p =~ s/\/$//; # strip any trailing slash

            if ($p eq $page)
            {
                $found = 1;
            }
            else
            {
                $found ? push @path_out, $p : push @path_in, $p;
            }
        }
        $hash_in->{(join '|', @path_in)}++;
        $hash_out->{(join '|', @path_out)}++;
    }

    # Include the number of matching visits

    $reports->{site}{total} = $total;
    $reports->{site}{units} = 'visits';

    # Disconnect from the data server

    $data_server->disconnect();

    # Return the path list in and out

    $channel->{traffic} = [
        {
            direction => 'in',
            page => $page,
            path => $self->get_list($hash_in),
        },
        {
            direction => 'out',
            page => $page,
            path => $self->get_list($hash_out),
        },
    ];
}

=item get_list($hash)

Turn a hash into a list

=cut
sub get_list
{
    my ($self, $hash) = @_;
    my @list = ();
    my @paths = sort keys %{$hash};
    foreach my $path (@paths)
    {
        push @list, { pages => $path, visits => $hash->{$path} };
    }
    return \@list;
}

=item get_channel($reports, $site_id, $channel_id)

Return channel data hash for a web site channel ID

=cut
sub get_channel
{
    my ($self, $reports, $site_id, $channel_id) = @_;

    # Return the current channel if it has the right channel ID

    if ($self->{channels} > 0)
    {
        my $current = $reports->{site}{channel}[$self->{channels}-1];
        return $current if $current && $current->{id} == $channel_id;
    }

    # Get the channel name if we were given an ID

    my $channel_name = '';
    if ($channel_id)
    {
        Data::SiteChannel->connect();
        my $site_channel = Data::SiteChannel->select('site_id = ? and channel_id = ?', $site_id, $channel_id);
        Data::SiteChannel->disconnect();
        $channel_name = $site_channel->{name};
    }

    # Create a new channel with an ID and name

    my $channel = $reports->{site}{channel}[$self->{channels}++] = { id => $channel_id, name => $channel_name };
    return $channel;
}

=item xml_reports($reports)

Return a traffic path data structure formatted as XML

=cut
sub xml_reports
{
    my ($self, $reports) = @_;
    my $xml = new XML::Simple(RootName => 'api');
    return $xml->XMLout($reports);
}

=item csv_reports($reports)

Return a traffic path data structure formatted as CSV

=cut
sub csv_reports
{
    my ($self, $reports) = @_;
    my $csv = '';

    my $data = $reports->{site}{path}{data};
    foreach my $datum (@{$data})
    {
        # TODO
        my $field = $datum->{field}; $field =~ s/"/""/g;
        my $value = $datum->{value}; $value =~ s/"/""/g;
        $csv .= "\"$field\",\"$value\"\n";
    }

    return $csv;
}

=item html_reports($reports)

Return a traffic path data structure formatted as HTML

=cut
sub html_reports
{
    my ($self, $reports) = @_;
    my $html = '';

    # Append the table header

    $html .= "<table>\n";

    # Convert the report data to HTML

    my $data = $reports->{site}{path}{data};
    foreach my $datum (@{$data})
    {
        # TODO
        my $field = $datum->{field}; $field =~ s/&/&amp;/g;
        my $value = $datum->{value}; $value =~ s/&/&amp;/g;
        $html .= "<tr><td>$field</td><td>$value</td></tr>\n";
    }

    # Append the table footer

    $html .= "</table>\n";

    # Return the report output formatted as an HTML table

    return $html;
}

=item json_reports($reports)

Return a traffic path data structure formatted as JSON

=cut
sub json_reports
{
    my ($self, $reports) = @_;
    my $json = new JSON;
    return $json->objToJson($reports);
}

}1;

=back

=head1 DEPENDENCIES

Client::Reporter, Data::Site, Utils::Time, XML::Simple, JSON

=head1 AUTHOR

Kevin Hutchinson <kevin.hutchinson@legendum.com>

=head1 COPYRIGHT

Copyright (c) 2015 Legendum Ltd (UK)

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 3
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
GNU General Public License for more details.
